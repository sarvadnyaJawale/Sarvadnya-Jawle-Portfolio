name: Docker CI/CD Workflow

on:
  push:
    branches:
    - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository.
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker Buildx.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub.
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    # Step 4: Build the Docker image.
    - name: Build Docker image
      run: |
        IMAGE_TAG=sarvadnya/portfolio:${{ github.sha }}
        docker build -t $IMAGE_TAG ./app
      env:
        COMMIT_HASH: ${{ github.sha }}

    # Step 5: Push the Docker image to Docker Hub.
    - name: Push Docker image
      run: |
        IMAGE_TAG=sarvadnya/portfolio:${{ github.sha }}
        docker push $IMAGE_TAG
      env:
        COMMIT_HASH: ${{ github.sha }}

    # Step 6: Deploy to EC2.
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Pull the Docker image on the EC2 instance.
          IMAGE_TAG=sarvadnya/portfolio:${{ github.sha }}
          docker pull $IMAGE_TAG

          # Stop and remove the existing container if it exists.
          if [ "$(docker ps -q -f name=github-action-docker-image)" ]; then
            docker stop github-action-docker-image
            docker rm github-action-docker-image
          fi

          # Run the Docker container.
          docker run -d --name github-action-docker-image -p 8080:80 $IMAGE_TAG
      env:
        COMMIT_HASH: ${{ github.sha }}

